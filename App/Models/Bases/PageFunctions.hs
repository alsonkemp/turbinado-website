{- DO NOT EDIT THIS FILE
   THIS FILE IS AUTOMAGICALLY GENERATED AND YOUR CHANGES WILL BE EATEN BY THE GENERATOR OVERLORD

   All changes should go into the Model file (e.g. App/Models/ExampleModel.hs)
-}

module App.Models.Bases.PageFunctions where

import App.Models.Bases.Common
import qualified Database.HDBC as HDBC
import Data.Maybe
import System.Time

 -- My type
import App.Models.Bases.PageType

import Turbinado.Environment.Types
import Turbinado.Environment.Database


instance HasFindByPrimaryKey Page  (String)  where
    find pk@(pk1) = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page WHERE (_id = ? )") [HDBC.toSql pk1]
        case res of
          [] -> throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "No record found when finding by Primary Key:page : " ++ (show pk)
                           }
          r:[] -> return $ Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))
          _ -> throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "Too many records found when finding by Primary Key:page : " ++ (show pk)
                           }

    delete pk@(pk1) = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.run conn ("DELETE FROM page WHERE (_id = ? )") [HDBC.toSql pk1]
        case res of
          0 -> (liftIO $ HDBC.handleSqlError $ HDBC.rollback conn) >>
               (throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "Rolling back.  No record found when deleting by Primary Key:page : " ++ (show pk)
                           })
          1 -> (liftIO $ HDBC.handleSqlError $ HDBC.commit conn) >> return ()
          _ -> (liftIO $ HDBC.handleSqlError $ HDBC.rollback conn) >>
               (throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "Rolling back.  Too many records deleted when deleting by Primary Key:page : " ++ (show pk)
                           })

    update m = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.run conn "UPDATE page SET (_id , content , title) = (?,?,?) WHERE (_id = ? )"
                  [HDBC.toSql $ _id m , HDBC.toSql $ content m , HDBC.toSql $ title m, HDBC.toSql $ _id m]
        liftIO $ HDBC.handleSqlError $ HDBC.commit conn
        return ()

instance IsModel Page where
    insert m returnId = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res  <- liftIO $ HDBC.handleSqlError $ HDBC.run conn (" INSERT INTO page (_id,content,title) VALUES (?,?,?)")  ( [HDBC.toSql $ _id m] ++ [HDBC.toSql $ content m] ++ [HDBC.toSql $ title m])
        case res of
          0 -> (liftIO $ HDBC.handleSqlError $ HDBC.rollback conn) >>
               (throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "Rolling back.  No record inserted :page : " ++ (show m)
                           })
          1 -> liftIO $ HDBC.handleSqlError $ HDBC.commit conn >>
               if returnId
                 then do i <- liftIO $ HDBC.catchSql (HDBC.handleSqlError $ HDBC.quickQuery' conn "SELECT lastval()" []) (\_ -> HDBC.commit conn >> (return $ [[HDBC.toSql (0 :: Integer)]]) ) 
                         return $ HDBC.fromSql $ head $ head i
               else return Nothing
    findAll = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn "SELECT _id , content , title FROM page" []
        return $ map (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) res
    findAllWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page WHERE (" ++ ss ++ ") ")  sp
        return $ map (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) res
    findAllOrderBy op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page ORDER BY " ++ op) []
        return $ map (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) res
    findAllWhereOrderBy ss sp op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page WHERE (" ++ ss ++ ") ORDER BY " ++ op) sp
        return $ map (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) res
    findOneWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page WHERE (" ++ ss ++ ") LIMIT 1") sp
        return $ (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) (head res)
    findOneOrderBy op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page ORDER BY " ++ op ++ " LIMIT 1")  []
        return $ (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) (head res)
    findOneWhereOrderBy ss sp op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT _id , content , title FROM page WHERE (" ++ ss ++ ") ORDER BY " ++ op ++" LIMIT 1")  sp
        return $ (\r -> Page (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1)) (HDBC.fromSql (r !! 2))) (head res)

deleteWhere :: (HasEnvironment m) => SelectString -> SelectParams -> m Integer
deleteWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.run conn ("DELETE FROM page WHERE (" ++ ss ++ ") ")  sp
        return res
