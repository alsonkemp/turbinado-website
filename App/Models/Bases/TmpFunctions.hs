{- DO NOT EDIT THIS FILE
   THIS FILE IS AUTOMAGICALLY GENERATED AND YOUR CHANGES WILL BE EATEN BY THE GENERATOR OVERLORD

   All changes should go into the Model file (e.g. App/Models/ExampleModel.hs)
-}

module App.Models.Bases.TmpFunctions where

import App.Models.Bases.Common
import qualified Database.HDBC as HDBC
import Data.Maybe
import Data.Time

 -- My type
import App.Models.Bases.TmpType

import Turbinado.Environment.Types
import Turbinado.Environment.Database




instance IsModel Tmp where
    insert m returnId = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res  <- liftIO $ HDBC.handleSqlError $ HDBC.run conn (" INSERT INTO tmp (ts,ts2) VALUES (" ++ (case (ts m) of Nothing -> "DEFAULT"; Just x -> "?") ++ "," ++ (case (ts2 m) of Nothing -> "DEFAULT"; Just x -> "?") ++ ")")  ( (case (ts m) of Nothing -> []; Just x -> [HDBC.toSql x]) ++ (case (ts2 m) of Nothing -> []; Just x -> [HDBC.toSql x]))
        case res of
          0 -> (liftIO $ HDBC.handleSqlError $ HDBC.rollback conn) >>
               (throwDyn $ HDBC.SqlError
                           {HDBC.seState = "",
                            HDBC.seNativeError = (-1),
                            HDBC.seErrorMsg = "Rolling back.  No record inserted :tmp : " ++ (show m)
                           })
          1 -> liftIO $ HDBC.handleSqlError $ HDBC.commit conn >>
               if returnId
                 then do i <- liftIO $ HDBC.catchSql (HDBC.handleSqlError $ HDBC.quickQuery' conn "SELECT lastval()" []) (\_ -> HDBC.commit conn >> (return $ [[HDBC.toSql (0 :: Integer)]]) ) 
                         return $ HDBC.fromSql $ head $ head i
               else return Nothing
    findAll = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn "SELECT ts , ts2 FROM tmp" []
        return $ map (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) res
    findAllWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT ts , ts2 FROM tmp WHERE (" ++ ss ++ ") ")  sp
        return $ map (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) res
    findAllOrderBy op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT ts , ts2 FROM tmp ORDER BY " ++ op) []
        return $ map (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) res
    findAllWhereOrderBy ss sp op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT ts , ts2 FROM tmp WHERE (" ++ ss ++ ") ORDER BY " ++ op) sp
        return $ map (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) res
    findOneWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT ts , ts2 FROM tmp WHERE (" ++ ss ++ ") LIMIT 1") sp
        return $ (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) (head res)
    findOneOrderBy op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT ts , ts2 FROM tmp ORDER BY " ++ op ++ " LIMIT 1")  []
        return $ (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) (head res)
    findOneWhereOrderBy ss sp op = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.quickQuery' conn ("SELECT ts , ts2 FROM tmp WHERE (" ++ ss ++ ") ORDER BY " ++ op ++" LIMIT 1")  sp
        return $ (\r -> Tmp (HDBC.fromSql (r !! 0)) (HDBC.fromSql (r !! 1))) (head res)

deleteWhere :: (HasEnvironment m) => SelectString -> SelectParams -> m Integer
deleteWhere ss sp = do
        conn <- getEnvironment >>= (return . fromJust . getDatabase )
        res <- liftIO $ HDBC.handleSqlError $ HDBC.run conn ("DELETE FROM tmp WHERE (" ++ ss ++ ") ")  sp
        return res
